import torch
from glob import glob
import numpy as np
import os, sys
from joblib import load
from tqdm import tqdm
import json
import argparse
# usage: python test_pca.py -c -8 -6 0 -r true  -n G_neutral.pth -f config_pca_38.json -n G_neutral.pth  -o G_Alice_young.pth -s Alice_young -g Alice_young.json

argParser = argparse.ArgumentParser()
argParser.add_argument("-c","--components",nargs="+", type=str)
argParser.add_argument("-r","--randomize_other_components",type=bool, help='true / false', default=False)
argParser.add_argument("-f","--config",type=str, help='json config file', default='config.json')
argParser.add_argument("-n","--neutral",type=str, help='neutral model generated by fit_pca.py')
argParser.add_argument("-s","--speaker",type=str, help='name of the generated speaker',default='SPEAKER_01')
argParser.add_argument("-o","--output",type=str, help="generated voice model (must begin with 'G_') ", default='G_result.pth')
argParser.add_argument("-g","--new_conf",type=str, help="config file for the generated model ", default='gen_conf.json')
args = argParser.parse_args()

random=args.randomize_other_components

w=[float(x) for x in args.components]
N_pca=len(w)
print(N_pca,w)

model_0=torch.load(args.neutral,weights_only=True)
PCA_mean=np.load('PCA_MEAN.npy')
XPCA_std=np.load('XPCA_STD.npy')
principalVectors=np.load('PCA_VECTORS.npy')


config=args.config
with open(args.config,'r') as f:
    config=json.loads(f.read())

N_speakers=len(list(config['spk']))

config['spk']=dict({args.speaker:0})    



device=model_0['model']['emb_g.weight'][0][1].device

# generated voice will be in the first slot
voice=args.speaker


if random:
    PCA_RAND=np.random.randn()*XPCA_std
else:
    PCA_RAND=np.zeros(N_speakers)
    
PCA_COMP=np.zeros_like(PCA_RAND)
PCA_COMP[0:N_pca]=w
PCA_COMP[N_pca:]=PCA_RAND[N_pca:]

V=np.dot(PCA_COMP, principalVectors) + PCA_mean

    
V=torch.tensor(V)
V=V.to(device)

model_0['model']['emb_g.weight'][0,:]=V
torch.save(model_0,args.output)
with open(args.new_conf,'w') as f:
    json.dump(config,f,indent=2)
    
print('Saved to '+args.output+' in voice '+voice)
print('Done.')
